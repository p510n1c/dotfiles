#+title: P510n1c Emacs Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Package System Setup
  #+begin_src emacs-lisp

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (when (memq window-system '(mac ns x))
          (exec-path-from-shell-initialize))

    (unless package-archive-contents
      (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

  #+end_src
* Core Configuration
** Disable startup message

   #+begin_src emacs-lisp

     (setq inhibit-startup-message t)

   #+end_src
   
** Disable scroll bar mode

   #+begin_src emacs-lisp

     (scroll-bar-mode -1)

   #+end_src

** Disable tool bar mode

   #+begin_src emacs-lisp

     (tool-bar-mode -1)

   #+end_src
   
** Disable tooltip mode

   #+begin_src emacs-lisp

     (tooltip-mode -1)

   #+end_src

** Set fringe mode

   #+begin_src emacs-lisp

     (set-fringe-mode 10)

   #+end_src

** Disable menu bar

   #+begin_src emacs-lisp

     (menu-bar-mode -1)

   #+end_src

** Set visible bell

   #+begin_src emacs-lisp

     (setq visible-bell t)

   #+end_src

** Enable line number

   #+begin_src emacs-lisp

     (column-number-mode)
     (global-display-line-numbers-mode t)

   #+end_src

** Disable line number for some modes

   #+begin_src emacs-lisp

          (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src

** Transparency

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** Spell Checking

#+begin_src emacs-lisp

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Spell checking
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package ispell
    :init
    (setq ispell-program-name "aspell"
          ispell-list-command "list"
          ispell-dictionary "british"
          flyspell-auto-correct-binding (kbd "<S-f12>")))

  (use-package flycheck)

#+end_src

** Cleaning up backup files
#+begin_src emacs-lisp
  (setq
    backup-by-copying t
    backup-directory-alist
      '(("." . "~/.saves/"))
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control 6)
#+end_src

* Key Binding

** ESC as quit prompts

#+begin_src emacs-lisp

  (global-set-key (kbd"<escape>") 'keyboard-escape-quit)

#+end_src

** Genereal

   #+begin_src emacs-lisp

     (use-package general
       :config
       (general-create-definer rune/leader-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")

       (rune/leader-keys
         "t"  '(:ignore t :which-key "toggles")))

   #+end_src

** Evil Mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Theme and Fonts

** Font

   #+begin_src emacs-lisp

     (defvar efs/default-font-size 130)
     (defvar efs/default-variable-font-size 130)

     (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

   #+end_src
   
** Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-tokyo-night t))

#+end_src

** Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

* Core UI Utils
*** Projectile
#+begin_src emacs-lisp
 (use-package projectile
   :diminish projectile-mode
   :config (projectile-mode)
   :bind-keymap ("C-c p" . projectile-command-map)
   :init ;; NOTE: Set this to the folder where you keep your Git repos!
   (when (file-directory-p "~/workspace")
     (setq projectile-project-search-path '("~/workspace")))
   (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Helm-projectile
#+begin_src emacs-lisp

  (use-package helm-projectile)

#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    :demand t
    :bind (("M-x" . helm-M-x)
       ("C-s" . helm-occur)
       ("M-y" . helm-show-kill-ring)
       ("C-c h x" . helm-register)    ; C-x r SPC and C-x r j
       ("C-x C-f" . helm-find-files)
       ("C-x b" . helm-mini)      ; *<major-mode> or /<dir> or !/<dir-not-desired> or @<regexp>
       :map helm-map
       ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
       ("C-i" . helm-execute-persistent-action) ; make TAB works in terminal
       ("C-z" . helm-select-action) ; list actions using C-z
       :map shell-mode-map
       ("C-c C-l" . helm-comint-input-ring) ; in shell mode
       :map minibuffer-local-map
       ("C-c C-l" . helm-minibuffer-history))
    :init
    (setq helm-command-prefix-key "C-c h")
    (setq recentf-save-file "~/.emacs.d/misc/recentf" ; customize yours
      recentf-max-saved-items 50)
    (defun spacemacs//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
    :config
    (setq helm-M-x-fuzzy-match t)
    (setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
    (setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
  (require 'helm-projectile)
    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    (helm-projectile-on)
    (require 'helm-config)
    (setq helm-split-window-in-side-p         t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)
    (add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (helm-mode 1))

#+end_src
** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful)

#+end_src

** Hydra

#+begin_src emacs-lisp

  (use-package hydra)

#+end_src

** Text Scalling

#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))


#+end_src

** Eshell
#+begin_src emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))
#+end_src

* ORG Mode

** Better Font Faces

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (efs/org-font-setup))

#+end_src

** Nicer Heading Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center Org Buffers

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp
  ;; use package ob-go for golang language
  (use-package ob-go)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (go . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure template

   #+begin_src emacs-lisp

     ;; This is needed as of Org 9.2
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("go" . "src go"))

   #+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "/home/p510n1c/workspace/dotfiles/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Development
** IDE Features with lsp-mode
*** lsp-mode

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui

#+begin_src emacs-lisp

      (use-package lsp-ui
        :hook (lsp-mode . lsp-ui-mode)
        :custom (lsp-ui-doc-position 'bottom))

#+end_src

*** helm-lsp
#+begin_src emacs-lisp

  (use-package helm-lsp)

#+end_src

*** lsp-treemacs

#+begin_src emacs-lisp

(use-package lsp-treemacs :after lsp)

#+end_src

*** Magit

#+begin_src emacs-lisp

   (use-package magit
     :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   ;; NOTE: Make sure to configure a GitHub token before using this package!
   ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
   ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

*** Flycheck

#+begin_src emacs-lisp

 (use-package flycheck
   :init (add-to-list 'display-buffer-alist '(,(rx bos "*Flaycheck errors*" eos)
                                              (display-buffer-reuse-window
                                               display-buffer-in-side-window)
                                              (side .bottom)
                                              (reusable-frames . visible)
                                              (window-height . 0.15))))

#+end_src

*** Yasnippet

#+begin_src emacs-lisp

(use-package yasnippet :config (yas-global-mode))

#+end_src

*** Company

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map ("<tab>" . company-complete-selection))
    (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))

#+end_src

*** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Debugging with dap-mode

#+begin_src emacs-lisp

 (use-package dap-mode
   :after lsp-mode
   :config
   (dap-mode t)
   (dap-ui-mode t)
   (dap-tooltip-mode 1)
   (tooltip-mode 1)
   (dap-register-debug-template "localhost:5005"
                                (list :type "java"
                                      :request "attach"
                                      :hostName "localhost"
                                      :port 5005)))

#+end_src

** Languages
*** JAVa
**** lsp

#+begin_src emacs-lisp
      (defun efs/default-code-style-hook()
      (setq c-basic-offset 2
            c-label-offset 0
            tab-width 2
            ident-tabs-mode nil
            require-final-newline nil))
      (add-hook 'java-mode-hook 'efs/default-code-style-hook)

      (use-package lsp-java
        :init (setq lsp-java-vmargs (list "-noverify"
                                          "-Xmx3G"
                                          "-XX:+UseG1GC"
                                          "-XX:+UseStringDeduplication")
    ;; "-javaagent:/home/p510n1c/.m2/repository/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar")
    ;; Don't organise imports on save lsp-java-save-action-organize-imports nil


    ;; Fetch less results from the Eclipse server lsp-java-completion-max-results 20
    ;; Currently (2019-04-24), dap-mode works best with Oracle
    ;; JDK, see https://github.com/emacs-lsp/dap-mode/issues/31
    ;;
    ;; lsp-java-java-path "~/.emacs.d/oracle-jdk-12.0.1/bin/java"
    ;; lsp-java-java-path "/usr/lib/jvm/java-17-openjdk/bin/java"
    )
    :config (add-hook 'java-mode-hook #'lsp))

#+end_src

**** dap

#+begin_src emacs-lisp

  (use-package dap-java :ensure nil :after (lsp-java)
  ;; The :bind here makes use-package fail to lead the dap-java block!
  ;; :bind
  ;; (("C-c R" . dap-java-run-test-class)
  ;;  ("C-c d" . dap-java-debug-test-method)
  ;;  ("C-c r" . dap-java-run-test-method)
  ;;  )
  :config
  (global-set-key (kbd "<f7>") 'dap-step-in)
  (global-set-key (kbd "<f8>") 'dap-next)
  (global-set-key (kbd "<f9>") 'dap-continue))

#+end_src
*** Pyhton

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3"))

#+end_src

*** Bash
*** XML, HTML, CSS

#+begin_src emacs-lisp

  (add-hook 'nxml-mode-hook 'lsp-deferred)
  (add-hook 'css-mode-hook 'lsp-deferred)
  (add-hook 'html-mode-hook 'lsp-deferred)
 

#+end_src

*** Golang

#+begin_src emacs-lisp
  (use-package go-mode)
    (defun lsp-go-install-save-hooks()
      (setq c-basic-offset 2
            c-label-offset 0
            tab-width 2
            ident-tabs-mode nil
            require-final-newline nil)
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
    (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

    (lsp-register-custom-settings
       '(("gopls.completeUnimported" t t)
         ("gopls.staticcheck" t t)))
    (add-hook 'go-mode-hook #'lsp-deferred)
  ;;  (add-hook 'go-mode-hook #'lsp-minor-mode)
#+end_src

*** Tramp

#+begin_src emacs-lisp

  (use-package tramp) (setq tramp-default-method "ssh")

#+end_src

***  YAML

#+begin_src emacs-lisp

  (use-package yaml-mode)

#+end_src

